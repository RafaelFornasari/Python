# ==================== Ativar VENV ==================== #
# python -m venv venv -> Cria novo
# .\venv\Scripts\activate -> Ativa
# deactivate -> Desativa
# python -m venv venv --clear -> Recriar do zero
# Remove-Item -Recurse -Force venv -> Remove

# =============================================== #
# ================ INTEGRA√á√ïES ================= #
import pandas as pd
import pyarrow as pa
import pyarrow.feather as feather
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns

# =============================================== #
# =============== CONFIG INICIAL =============== #
# Configura√ß√£o inicial
ARQUIVO_CSV = 'vehicles.csv'
ARQUIVO_FEATHER = 'vehicles.feather'

print(f"\nRafael, iniciando processamento do arquivo {ARQUIVO_CSV}...")

# Verifica e carrega os dados
if not Path(ARQUIVO_FEATHER).exists():
    print("Arquivo feather n√£o encontrado. Criando a partir do CSV...")
    try:
        df = pd.read_csv(ARQUIVO_CSV)
        df.to_feather(ARQUIVO_FEATHER)
        print("‚úÖ Arquivo feather criado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao processar arquivo CSV: {e}")
        exit()
else:
    print("‚úÖ Arquivo feather encontrado. Carregando...")

try:
    df = pd.read_feather(ARQUIVO_FEATHER)
    print(f"\nDataset carregado com {len(df):,} registros e {len(df.columns)} colunas.")
except Exception as e:
    print(f"‚ùå Erro ao carregar arquivo feather: {e}")
    exit()
# =============================================== #
# ================== FUN√á√ïES =================== #
def estatisticas_colunas(df):
    
    """
    Retorna estat√≠sticas para colunas num√©ricas (int/float)
    com formata√ß√£o leg√≠vel
    """
    numericas = df.select_dtypes(include=['int64', 'float64'])
    
    if numericas.empty:
        print("\n‚ö†Ô∏è Nenhuma coluna num√©rica encontrada!")
        return
    
    estatisticas = pd.DataFrame({
        'Coluna': numericas.columns,
        'Tipo': numericas.dtypes.values,
        'M√©dia': numericas.mean(),
        'Mediana': numericas.median(),
        'Desvio Padr√£o': numericas.std(),
        'M√≠nimo': numericas.min(),
        'M√°ximo': numericas.max(),
        'Nulos (%)': (numericas.isnull().mean() * 100).round(2)
    })
    
    # Configura formata√ß√£o
    pd.options.display.float_format = '{:,.2f}'.format
    
    print("\n" + "="*50)
    print("üìà ESTAT√çSTICAS DAS COLUNAS NUM√âRICAS:")
    print(estatisticas.to_string(index=False))
    print("="*50)
    
    pd.reset_option('display.float_format')

def comparacao_campos(df):
    """Analisa a rela√ß√£o entre dois campos com sele√ß√£o de m√©todo estat√≠stico"""
    print("\n" + "="*50)
    print("üìå COLUNAS DISPON√çVEIS PARA COMPARA√á√ÉO:")
    
    for i, coluna in enumerate(df.columns, 1):
        print(f"{i}. {coluna}")
        
     # Configura√ß√£o inicial padr√£o
    metodo_nome = 'pearson'  # Definindo valor padr√£o
    metodo_desc = "üìà An√°lise de rela√ß√£o LINEAR (Pearson)"
    campo1 = None
    campo2 = None

    # Sele√ß√£o dos campos
    print("\n" + "="*50)
    print("üîé SELECIONE 2 CAMPOS PARA COMPARA√á√ÉO")
    
    while True:
        try:
            campo1_idx = int(input("‚ñ∂ Digite o n√∫mero do primeiro campo: ")) - 1
            campo2_idx = int(input("‚ñ∂ Digite o n√∫mero do segundo campo: ")) - 1
            
            if 0 <= campo1_idx < len(df.columns) and 0 <= campo2_idx < len(df.columns):
                campo1 = df.columns[campo1_idx]
                campo2 = df.columns[campo2_idx]
                break
            else:
                print("‚ùå N√∫mero inv√°lido. Tente novamente.")
        except ValueError:
            print("‚ùå Por favor, digite apenas n√∫meros.")

    # Configura√ß√£o inicial para m√©todos
    metodo_nome = 'pearson'
    metodo_desc = "üìà An√°lise de rela√ß√£o LINEAR (Pearson)"
    
    # Sele√ß√£o do coeficiente para vari√°veis num√©ricas
    if all(pd.api.types.is_numeric_dtype(df[c]) for c in [campo1, campo2]):
        print("\n" + "="*50)
        print("üßÆ M√âTODO DE AN√ÅLISE ESTAT√çSTICA:")
        print("1. Pearson [Padr√£o]")
        print(f"   ‚Ä¢ Covari√¢ncia: {df[[campo1, campo2]].cov().iloc[0,1]:,.2f}")
        print("   ‚Ä¢ Interpreta√ß√£o covari√¢ncia:")
        print("     - Valor positivo: As vari√°veis tendem a aumentar juntas")
        print("     - Valor negativo: Uma vari√°vel aumenta quando a outra diminui")
        print("     - Magnitude: Depende das escalas das vari√°veis")
        
        print("\n2. Spearman")
        print("   ‚Ä¢ Rela√ß√µes monot√¥nicas (crescentes/decrescentes n√£o-lineares)")
        
        print("\n3. Kendall")
        print("   ‚Ä¢ Concord√¢ncia entre rankings (ideal para dados ordinais)")
        
        while True:
            try:
                escolha = input("\n‚ñ∂ Digite o n√∫mero do m√©todo (Enter para Pearson padr√£o): ")
                if escolha == "":
                    escolha = 1  # Default
                
                escolha = int(escolha)
                if escolha in [1, 2, 3]:
                    metodos = {
                        1: ('pearson', "üìà An√°lise de rela√ß√£o LINEAR (Pearson)"),
                        2: ('spearman', "üîÑ An√°lise de tend√™ncia MONOT√îNICA (Spearman)"),
                        3: ('kendall', "üè∑Ô∏è An√°lise de CONCORD√ÇNCIA (Kendall)")
                    }
                    metodo_nome, metodo_desc = metodos[escolha]
                    break
                else:
                    print("‚ùå Op√ß√£o inv√°lida. Digite 1, 2, 3 ou Enter para padr√£o")
            except ValueError:
                print("‚ùå Por favor, digite apenas n√∫meros ou Enter")

    print("\n" + "="*50)
    print(f"{metodo_desc} entre '{campo1}' e '{campo2}':")

    # AN√ÅLISE NUM√âRICA x NUM√âRICA
    if all(pd.api.types.is_numeric_dtype(df[c]) for c in [campo1, campo2]):
        corr = df[[campo1, campo2]].corr(method=metodo_nome).iloc[0,1] 
        print(f"\nüîç COEFICIENTE ({metodo_nome.upper()}): {corr:.2f}")
    
    # Leitura personalizada para cada m√©todo (VERS√ÉO COMPLETA E APRIMORADA)
    if metodo_nome == 'pearson':
        print(f"   Veja que de acordo com seu coeficiente de Pearson {corr:.2f}, a interpreta√ß√£o seria:")
        if abs(corr) >= 0.7:
            print(f"   'Forte correla√ß√£o linear {'negativa' if corr < 0 else 'positiva'} entre as vari√°veis'")
            print(f"   ‚Ä¢ {campo1} e {campo2} variam {'inversamente' if corr < 0 else 'conjuntamente'} de forma previs√≠vel")
            print(f"   ‚Ä¢ {abs(corr)*100:.0f}% da varia√ß√£o pode ser explicada pela rela√ß√£o linear")
        elif abs(corr) >= 0.5:
            print(f"   'Correla√ß√£o linear {'negativa' if corr < 0 else 'positiva'} moderada'") 
            print(f"   ‚Ä¢ Rela√ß√£o discern√≠vel, mas com alguns desvios")
            print(f"   ‚Ä¢ Quando {campo1} aumenta, {campo2} tende a {'diminuir' if corr < 0 else 'aumentar'}")
        elif abs(corr) >= 0.3:
            print(f"   'Correla√ß√£o linear {'negativa' if corr < 0 else 'positiva'} fraca'")
            print(f"   ‚Ä¢ Alguma rela√ß√£o detectada, mas pouco confi√°vel para previs√µes")
        else:
            print("   'Praticamente nenhuma correla√ß√£o linear detectada'")
            print("   ‚Ä¢ As vari√°veis n√£o mostram padr√£o linear mensur√°vel")
            
    elif metodo_nome == 'spearman':
        print(f"   Veja que de acordo com seu coeficiente de Spearman {corr:.2f}, a interpreta√ß√£o seria:")
        if abs(corr) >= 0.7:
            print(f"   'Forte tend√™ncia monot√¥nica {'decrescente' if corr < 0 else 'crescente'}'")
            print(f"   ‚Ä¢ Quando {campo1} aumenta, {campo2} {'sempre diminui' if corr < 0 else 'sempre aumenta'} na maioria absoluta dos casos")
        elif abs(corr) >= 0.5:
            print(f"   'Tend√™ncia {'inversa' if corr < 0 else 'direta'} moderada, por√©m consistente'") 
            print(f"   ‚Ä¢ Padr√£o claro de {'decr√©scimo' if corr < 0 else 'crescimento'} em ~{abs(corr)*100:.0f}% dos pares observados")
        elif abs(corr) >= 0.3:
            print(f"   'Tend√™ncia {'negativa' if corr < 0 else 'positiva'} fraca, mas percept√≠vel'")
            print(f"   ‚Ä¢ Quando {campo1} AUMENTA, o {campo2} tende a {'DIMINUIR' if corr < 0 else 'AUMENTAR'}")
            print(f"   ‚Ä¢ Quando {campo1} DIMINUI, o {campo2} tende a {'AUMENTAR' if corr < 0 else 'DIMINUIR'}")
            print(f"   ‚Ä¢ For√ßa: Valor absoluto {abs(corr):.2f} (entre 0.3 e 0.5) ‚Üí ~{abs(corr)*100:.0f}% dos pares seguem esse padr√£o")
        else:
            print("   'Rela√ß√£o pouco significativa entre as vari√°veis'")
            print("   ‚Ä¢ N√£o h√° padr√£o direcional consistente")
            
    else:  # Kendall
        print(f"   Veja que de acordo com seu coeficiente de Kendall {corr:.2f}, a interpreta√ß√£o seria:")
        if abs(corr) >= 0.7:
            print(f"   'Concord√¢ncia {'negativa' if corr < 0 else 'positiva'} quase perfeita entre rankings'")
            print(f"   ‚Ä¢ A ordem dos valores de {campo1} e {campo2} {'sempre inverte' if corr < 0 else 'quase sempre coincide'}")
        elif abs(corr) >= 0.5:
            print(f"   'Concord√¢ncia {'negativa' if corr < 0 else 'positiva'} moderada'") 
            print(f"   ‚Ä¢ Em ~{abs(corr)*100:.0f}% dos casos, os rankings mant√™m rela√ß√£o {'inversa' if corr < 0 else 'direta'}")
        elif abs(corr) >= 0.3:
            print(f"   'Concord√¢ncia {'negativa' if corr < 0 else 'positiva'} fraca'")
            print("   ‚Ä¢ Alguma rela√ß√£o nos rankings, mas inconsistente")
        else:
            print("   'Concord√¢ncia insignificante entre rankings'")
            print("   ‚Ä¢ A ordem dos valores parece aleat√≥ria")
    
              
    # Interpreta√ß√£o espec√≠fica
    print("\nüìå INTERPRETA√á√ÉO:")
    if metodo_nome == 'pearson':
        print("1.00: Correla√ß√£o perfeita positiva")
        print("0.50: Correla√ß√£o moderada positiva")
        print("0.00: Nenhuma correla√ß√£o")
        print("-0.50: Correla√ß√£o moderada negativa")
        print("-1.00: Correla√ß√£o perfeita negativa")
    elif metodo_nome == 'spearman':
        print("1.00: Tend√™ncia monot√¥nica perfeita crescente")
        print("0.50: Tend√™ncia monot√¥nica moderada crescente")
        print("0.00: Nenhuma tend√™ncia")
        print("-0.50: Tend√™ncia monot√¥nica moderada decrescente")
        print("-1.00: Tend√™ncia monot√¥nica perfeita decrescente")
    else:  # Kendall
        print("1.00: Concord√¢ncia perfeita")
        print("0.50: Concord√¢ncia moderada")
        print("0.00: Nenhuma concord√¢ncia")
        print("-0.50: Discord√¢ncia moderada")
        print("-1.00: Discord√¢ncia perfeita")
        
        # An√°lise do valor espec√≠fico
        print(f"\nüîé NO SEU CASO (Coeficiente: {corr:.2f}):")
        if abs(corr) >= 0.8:
            print("‚Ä¢ Rela√ß√£o MUITO FORTE entre as vari√°veis")
        elif abs(corr) >= 0.5:
            print("‚Ä¢ Rela√ß√£o MODERADA entre as vari√°veis")
        elif abs(corr) >= 0.3:
            print("‚Ä¢ Rela√ß√£o FRACA entre as vari√°veis")
        else:
            print("‚Ä¢ Praticamente NENHUMA rela√ß√£o detectada")
        
        if corr > 0:
            print("‚Ä¢ Rela√ß√£o POSITIVA (as vari√°veis mudam na mesma dire√ß√£o)")
        elif corr < 0:
            print("‚Ä¢ Rela√ß√£o NEGATIVA (as vari√°veis mudam em dire√ß√µes opostas)")

        # Estat√≠sticas formatadas corretamente
        print("\nüìà ESTAT√çSTICAS DESCRITIVAS:")
        stats = df[[campo1, campo2]].describe()
        
        # Formata√ß√£o para 2 casas decimais sem nota√ß√£o cient√≠fica
        pd.options.display.float_format = '{:,.2f}'.format
        print(stats.to_string(float_format='{:,.2f}'.format))
        pd.reset_option('display.float_format')
"""
def plotar_boxplot(df):
    #Gera boxplot com op√ß√µes de transforma√ß√£o logar√≠tmica e zoom
    print("\n" + "="*50)
    print("üìä CONFIGURA√á√ÉO DO BOXPLOT")
    
    # 1. Sele√ß√£o da coluna (existente)
    colunas_numericas = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    print("\nüî¢ COLUNAS NUM√âRICAS DISPON√çVEIS:")
    for i, col in enumerate(colunas_numericas, 1):
        print(f"{i}. {col}")
    
    try:
        col_idx = int(input("\n‚ñ∂ Escolha o n√∫mero da coluna: ")) - 1
        coluna = colunas_numericas[col_idx]
    except (ValueError, IndexError):
        print("‚ùå Sele√ß√£o inv√°lida!")
        return

    # 2. Configura√ß√µes b√°sicas (existente)
    print("\n‚öôÔ∏è CONFIGURA√á√ïES B√ÅSICAS:")
    fator = float(input("‚ñ∂ Fator do IQR (1.5 ou 3.0): ") or "1.5")
    orientacao = input("‚ñ∂ Orienta√ß√£o (h/v): ").lower() or "v"
    # 2.3. Tamanho da figura (com limites seguros)
    while True:
        try:
            largura = float(input("‚ñ∂ Largura da figura (1-20, padr√£o=10): ") or 10)
            altura = float(input("‚ñ∂ Altura da figura (1-20, padr√£o=6): ") or 6)
            if 1 <= largura <= 20 and 1 <= altura <= 20:
                break
            print("‚ö†Ô∏è Valores devem estar entre 1 e 20")
        except ValueError:
            print("‚ö†Ô∏è Digite n√∫meros v√°lidos")
            largura, altura = 10, 6

    # 3. NOVA OP√á√ÉO: Tipo de visualiza√ß√£o (MODIFICADO)
    print("\nüîç MELHORIA DE VISUALIZA√á√ÉO:")
    print("1. Padr√£o (recomendado para dados uniformes)")
    print("2. Escala logar√≠tmica (recomendado para outliers extremos)")
    print("3. Zoom na √°rea interquartil (foco no n√∫cleo dos dados)")
    print("4. Retirar outliers da visualiza√ß√£o")  # NOVA OP√á√ÉO
    escolha_visualizacao = input("‚ñ∂ Escolha (1/2/3/4): ") or "1"

    # C√°lculos estat√≠sticos (existente)
    q1 = df[coluna].quantile(0.25)
    q3 = df[coluna].quantile(0.75)
    iqr = q3 - q1
    mediana = df[coluna].median()
    media = df[coluna].mean()
    limite_inferior = max(0, q1 - fator * iqr)
    limite_superior = q3 + fator * iqr

    # Plotagem (CORRE√á√ÉO DA ORIENTA√á√ÉO + NOVA OP√á√ÉO)
    plt.figure(figsize=(largura, altura), tight_layout=True)
    sns.set_style("whitegrid")
    
    # Configura orienta√ß√£o (CORRIGIDO)
    showfliers = escolha_visualizacao != "4"  # NOVO: Controla outliers
    if orientacao == "h":  # CORRE√á√ÉO: 'h' agora funciona corretamente
        ax = sns.boxplot(y=df[coluna], whis=fator, color="skyblue", showfliers=showfliers)
    else:
        ax = sns.boxplot(x=df[coluna], whis=fator, color="skyblue", showfliers=showfliers)

    # Aplica a melhoria escolhida (existente)
    if escolha_visualizacao == "2":
        if orientacao == "h":
            plt.yscale('log')
            plt.ylabel(f"{coluna} (escala logar√≠tmica)")
        else:
            plt.xscale('log')
            plt.xlabel(f"{coluna} (escala logar√≠tmica)")
        titulo = f"Boxplot LOGAR√çTMICO de '{coluna}'"
        
    elif escolha_visualizacao == "3":
        limite_superior_zoom = q3 + 5 * iqr
        if orientacao == "h":
            plt.ylim(0, limite_superior_zoom)
        else:
            plt.xlim(0, limite_superior_zoom)
        titulo = f"Boxplot de '{coluna}' (Zoom IQR)"
        
    else:
        titulo = f"Boxplot de '{coluna}'"

    # Linhas de refer√™ncia
    linewidth = 2.5 if escolha_visualizacao != "3" else 3.0
    if orientacao == "h":
        plt.axhline(limite_superior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Sup: {limite_superior:,.2f}')
        plt.axhline(q3, color='green', linestyle='--', linewidth=linewidth, label=f'Q3: {q3:,.2f}')
        plt.axhline(media, color='purple', linestyle=':', linewidth=linewidth+0.5, label=f'M√©dia: {media:,.2f}')
        plt.axhline(mediana, color='orange', linestyle='-', linewidth=linewidth+0.5, label=f'Mediana: {mediana:,.2f}')
        plt.axhline(q1, color='red', linestyle='--', linewidth=linewidth, label=f'Q1: {q1:,.2f}')
        plt.axhline(limite_inferior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Inf: {limite_inferior:,.2f}')
        
    else:
        plt.axhline(limite_superior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Sup: {limite_superior:,.2f}')
        plt.axhline(q3, color='green', linestyle='--', linewidth=linewidth, label=f'Q3: {q3:,.2f}')
        plt.axhline(media, color='purple', linestyle=':', linewidth=linewidth+0.5, label=f'M√©dia: {media:,.2f}')
        plt.axhline(mediana, color='orange', linestyle='-', linewidth=linewidth+0.5, label=f'Mediana: {mediana:,.2f}')
        plt.axhline(q1, color='red', linestyle='--', linewidth=linewidth, label=f'Q1: {q1:,.2f}')
        plt.axhline(limite_inferior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Inf: {limite_inferior:,.2f}')
        

    plt.title(f"{titulo}\n(IQR: {iqr:.2f}, Limites: {fator}√óIQR)", fontsize=12)
    
    plt.legend(
        bbox_to_anchor=(1.02, 1),
        loc='upper left',
        borderaxespad=0.
    )
    plt.show()"""
    
def plotar_boxplot(df):
    """Gera boxplot com op√ß√µes de transforma√ß√£o logar√≠tmica, zoom e limites personalizados"""
    print("\n" + "="*50)
    print("üìä CONFIGURA√á√ÉO DO BOXPLOT")
    
    # 1. Sele√ß√£o da coluna
    colunas_numericas = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    print("\nüî¢ COLUNAS NUM√âRICAS DISPON√çVEIS:")
    for i, col in enumerate(colunas_numericas, 1):
        print(f"{i}. {col}")
    
    try:
        col_idx = int(input("\n‚ñ∂ Escolha o n√∫mero da coluna: ")) - 1
        coluna = colunas_numericas[col_idx]
    except (ValueError, IndexError):
        print("‚ùå Sele√ß√£o inv√°lida!")
        return

    # Mostrar estat√≠sticas b√°sicas para refer√™ncia
    stats = df[coluna].describe()
    print(f"\n‚ÑπÔ∏è Estat√≠sticas de '{coluna}':")
    print(f"‚Ä¢ M√≠nimo: {stats['min']:,.2f}")
    print(f"‚Ä¢ M√°ximo: {stats['max']:,.2f}")
    print(f"‚Ä¢ M√©dia: {stats['mean']:,.2f}")
    print(f"‚Ä¢ Mediana: {stats['50%']:,.2f}")

    # 2. Configura√ß√µes b√°sicas
    print("\n‚öôÔ∏è CONFIGURA√á√ïES B√ÅSICAS:")
    fator = float(input("‚ñ∂ Fator do IQR (1.5 ou 3.0): ") or "1.5")
    orientacao = input("‚ñ∂ Orienta√ß√£o (h/v): ").lower() or "v"
    
    # Configura√ß√£o de limites personalizados
    print("\nüîò LIMITES PERSONALIZADOS (deixe em branco para usar valores calculados)")
    try:
        min_personalizado = input(f"‚ñ∂ Valor m√≠nimo (sugerido: {stats['min']:.2f}): ")
        min_personalizado = float(min_personalizado) if min_personalizado else None
        
        max_personalizado = input(f"‚ñ∂ Valor m√°ximo (sugerido: {stats['max']:.2f}): ")
        max_personalizado = float(max_personalizado) if max_personalizado else None
    except ValueError:
        print("‚ùå Valor inv√°lido! Usando limites calculados automaticamente.")
        min_personalizado, max_personalizado = None, None

    # Tamanho da figura
    while True:
        try:
            largura = float(input("‚ñ∂ Largura da figura (1-20, padr√£o=10): ") or 10)
            altura = float(input("‚ñ∂ Altura da figura (1-20, padr√£o=6): ") or 6)
            if 1 <= largura <= 20 and 1 <= altura <= 20:
                break
            print("‚ö†Ô∏è Valores devem estar entre 1 e 20")
        except ValueError:
            print("‚ö†Ô∏è Digite n√∫meros v√°lidos")
            largura, altura = 10, 6

    # 3. Tipo de visualiza√ß√£o
    print("\nüîç MELHORIA DE VISUALIZA√á√ÉO:")
    print("1. Padr√£o (recomendado para dados uniformes)")
    print("2. Escala logar√≠tmica (recomendado para outliers extremos)")
    print("3. Zoom na √°rea interquartil (foco no n√∫cleo dos dados)")
    print("4. Retirar outliers da visualiza√ß√£o")
    escolha_visualizacao = input("‚ñ∂ Escolha (1/2/3/4): ") or "1"

    # C√°lculos estat√≠sticos
    q1 = df[coluna].quantile(0.25)
    q3 = df[coluna].quantile(0.75)
    iqr = q3 - q1
    mediana = df[coluna].median()
    media = df[coluna].mean()
    
    # Usa limites personalizados ou calculados
    limite_inferior = min_personalizado if min_personalizado is not None else max(0, q1 - fator * iqr)
    limite_superior = max_personalizado if max_personalizado is not None else q3 + fator * iqr

    # Plotagem
    plt.figure(figsize=(largura, altura), tight_layout=True)
    sns.set_style("whitegrid")
    
    # Filtra os dados dentro dos limites
    dados_filtrados = df[(df[coluna] >= limite_inferior) & (df[coluna] <= limite_superior)][coluna]
    
    showfliers = escolha_visualizacao != "4"
    if orientacao == "h":
        ax = sns.boxplot(y=dados_filtrados, whis=fator, color="skyblue", showfliers=showfliers)
    else:
        ax = sns.boxplot(x=dados_filtrados, whis=fator, color="skyblue", showfliers=showfliers)

    # Aplica a melhoria escolhida
    if escolha_visualizacao == "2":
        if orientacao == "h":
            plt.yscale('log')
            plt.ylabel(f"{coluna} (escala logar√≠tmica)")
        else:
            plt.xscale('log')
            plt.xlabel(f"{coluna} (escala logar√≠tmica)")
        titulo = f"Boxplot LOGAR√çTMICO de '{coluna}'"
    elif escolha_visualizacao == "3":
        limite_superior_zoom = q3 + 5 * iqr
        if orientacao == "h":
            plt.ylim(0, limite_superior_zoom)
        else:
            plt.xlim(0, limite_superior_zoom)
        titulo = f"Boxplot de '{coluna}' (Zoom IQR)"
    else:
        titulo = f"Boxplot de '{coluna}'"

    # Linhas de refer√™ncia
    linewidth = 2.5 if escolha_visualizacao != "3" else 3.0
    if orientacao == "h":
        plt.axhline(limite_superior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Sup: {limite_superior:,.2f}')
        plt.axhline(q3, color='green', linestyle='--', linewidth=linewidth, label=f'Q3: {q3:,.2f}')
        plt.axhline(media, color='purple', linestyle=':', linewidth=linewidth+0.5, label=f'M√©dia: {media:,.2f}')
        plt.axhline(mediana, color='orange', linestyle='-', linewidth=linewidth+0.5, label=f'Mediana: {mediana:,.2f}')
        plt.axhline(q1, color='red', linestyle='--', linewidth=linewidth, label=f'Q1: {q1:,.2f}')
        plt.axhline(limite_inferior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Inf: {limite_inferior:,.2f}')
    else:
        plt.axvline(limite_superior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Sup: {limite_superior:,.2f}')
        plt.axvline(q3, color='green', linestyle='--', linewidth=linewidth, label=f'Q3: {q3:,.2f}')
        plt.axvline(media, color='purple', linestyle=':', linewidth=linewidth+0.5, label=f'M√©dia: {media:,.2f}')
        plt.axvline(mediana, color='orange', linestyle='-', linewidth=linewidth+0.5, label=f'Mediana: {mediana:,.2f}')
        plt.axvline(q1, color='red', linestyle='--', linewidth=linewidth, label=f'Q1: {q1:,.2f}')
        plt.axvline(limite_inferior, color='gray', linestyle='-.', linewidth=1, label=f'Lim Inf: {limite_inferior:,.2f}')

    # Adiciona informa√ß√£o sobre os limites usados
    if min_personalizado is not None or max_personalizado is not None:
        titulo += "\n(Limites personalizados)"
    
    plt.title(f"{titulo}\n(IQR: {iqr:.2f}, Limites: {fator}√óIQR)", fontsize=12)
    plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0.)
    plt.show()
    

def tratamento_limpeza(df_original): 
    df = df_original.copy()
    log_operacoes = []
    
    while True:
        print("\n" + "="*50)
        print("üßπ MENU DE TRATAMENTO/LIMPEZA")
        print("="*50)
        print("1. Excluir linhas")
        print("2. Alterar tipo de dados")
        print("3. Excluir colunas")
        print("4. Tratar valores nulos")
        print("5. Salvar dataset modificado")
        print("0. Voltar ao menu principal (descartar altera√ß√µes)")
        
        opcao = input("\n‚ñ∂ Escolha uma op√ß√£o: ")
        
        if opcao == '0':
            return None  # Descarta altera√ß√µes
        elif opcao == '1':
            df, log = excluir_linhas(df)
            log_operacoes.extend(log)
        elif opcao == '2':
            df, log = alterar_tipo(df)
            log_operacoes.extend(log)
        elif opcao == '3':
            df, log = excluir_colunas(df)
            log_operacoes.extend(log)
        elif opcao == '4':
            df, log = tratar_nulos(df)
            log_operacoes.extend(log)
        elif opcao == '5':
            salvar_dataset(df, log_operacoes)
            return df
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def excluir_linhas(df):
    log = []
    
    # Mostra colunas num√©ricas para sele√ß√£o
    numericas = df.select_dtypes(include=['int64', 'float64']).columns
    print("\nüî¢ COLUNAS NUM√âRICAS DISPON√çVEIS:")
    for i, col in enumerate(numericas, 1):
        print(f"{i}. {col} (Tipo: {df[col].dtype})")
    
    # Valida√ß√£o da sele√ß√£o da coluna
    while True:
        try:
            col_idx = int(input("\n‚ñ∂ Selecione a coluna para filtrar: ")) - 1
            if 0 <= col_idx < len(numericas):
                coluna = numericas[col_idx]
                break
            print("‚ùå N√∫mero inv√°lido. Tente novamente.")
        except ValueError:
            print("‚ùå Por favor, digite apenas n√∫meros.")

    print("\n‚öôÔ∏è CRIT√âRIOS DE EXCLUS√ÉO:")
    print("1. Valores nulos/NaN")
    print("2. Valores acima de X")
    print("3. Valores abaixo de X")
    print("4. Valores fora do intervalo IQR")
    
    # Valida√ß√£o do crit√©rio
    while True:
        criterio = input("‚ñ∂ Escolha o crit√©rio: ")
        if criterio in ['1', '2', '3', '4']:
            break
        print("‚ùå Op√ß√£o inv√°lida. Digite 1, 2, 3 ou 4")

    linhas_removidas = 0
    
    if criterio == '1':
        linhas_removidas = df[coluna].isna().sum()
        if linhas_removidas > 0:
            df = df.dropna(subset=[coluna])
            log.append(f"Removidas {linhas_removidas} linhas com valores nulos na coluna '{coluna}'")
        else:
            print("‚ö†Ô∏è Nenhum valor nulo encontrado nesta coluna.")
    
    elif criterio == '2':
        while True:
            try:
                limite = float(input("‚ñ∂ Digite o valor limite superior: "))
                linhas_removidas = len(df[df[coluna] > limite])
                if linhas_removidas > 0:
                    df = df[df[coluna] <= limite]
                    log.append(f"Removidas {linhas_removidas} linhas com valores acima de {limite} na coluna '{coluna}'")
                    break
                print("‚ö†Ô∏è Nenhum valor acima do limite encontrado. Tente um valor maior.")
            except ValueError:
                print("‚ùå Por favor, digite um n√∫mero v√°lido.")
    
    elif criterio == '3':
        while True:
            try:
                limite = float(input("‚ñ∂ Digite o valor limite inferior: "))
                linhas_removidas = len(df[df[coluna] < limite])
                if linhas_removidas > 0:
                    df = df[df[coluna] >= limite]
                    log.append(f"Removidas {linhas_removidas} linhas com valores abaixo de {limite} na coluna '{coluna}'")
                    break
                print("‚ö†Ô∏è Nenhum valor abaixo do limite encontrado. Tente um valor menor.")
            except ValueError:
                print("‚ùå Por favor, digite um n√∫mero v√°lido.")
    
    elif criterio == '4':
        q1 = df[coluna].quantile(0.25)
        q3 = df[coluna].quantile(0.75)
        iqr = q3 - q1
        limite_inf = q1 - 1.5*iqr
        limite_sup = q3 + 1.5*iqr
        linhas_removidas = len(df[(df[coluna] < limite_inf) | (df[coluna] > limite_sup)])
        if linhas_removidas > 0:
            df = df[(df[coluna] >= limite_inf) & (df[coluna] <= limite_sup)]
            log.append(f"Removidas {linhas_removidas} linhas outliers (IQR) na coluna '{coluna}'")
        else:
            print("‚ö†Ô∏è Nenhum outlier encontrado usando o m√©todo IQR")

    if linhas_removidas > 0:
        print(f"\n‚úÖ Total de linhas removidas: {linhas_removidas}")
        print(f"üìä Dataset resultante: {len(df)} linhas")
    else:
        print("\n‚ÑπÔ∏è Nenhuma linha foi removida")
    
    return df, log

def salvar_dataset(df, log_operacoes):
    print("\n" + "="*50)
    print("üíæ SALVAR DATASET MODIFICADO")
    
    sufixo = input("‚ñ∂ Digite o sufixo para o novo arquivo (ex: 'clean' para 'vehicles_clean.feather'): ")
    formato = input("‚ñ∂ Formato de sa√≠da (1-feather, 2-csv): ") or "1"
    
    nome_base = ARQUIVO_FEATHER.split('.')[0]
    novo_nome = f"{nome_base}_{sufixo}.{'feather' if formato == '1' else 'csv'}"
    
    if formato == '1':
        df.to_feather(novo_nome)
    else:
        df.to_csv(novo_nome, index=False)
    
    print("\nüìù LOG DE OPERA√á√ïES REALIZADAS:")
    for operacao in log_operacoes:
        print(f"‚Ä¢ {operacao}")
    
    print(f"\n‚úÖ Dataset salvo como: {novo_nome}")

def alterar_tipo(df):
    log = []
    print("\nüìã COLUNAS DISPON√çVEIS:")
    for i, col in enumerate(df.columns, 1):
        print(f"{i}. {col} (Tipo atual: {df[col].dtype})")
    
    col_idx = int(input("\n‚ñ∂ Selecione a coluna para convers√£o: ")) - 1
    coluna = df.columns[col_idx]
    
    print("\nüìù TIPOS DISPON√çVEIS:")
    print("1. Inteiro (int64)")
    print("2. Decimal (float64)")
    print("3. Texto (object)")
    print("4. Categ√≥rico (category)")
    novo_tipo = input("‚ñ∂ Escolha o novo tipo: ")
    
    try:
        if novo_tipo == '1':
            df[coluna] = pd.to_numeric(df[coluna], errors='coerce').astype('int64')
        elif novo_tipo == '2':
            df[coluna] = pd.to_numeric(df[coluna], errors='coerce').astype('float64')
        elif novo_tipo == '3':
            df[coluna] = df[coluna].astype('object')
        elif novo_tipo == '4':
            df[coluna] = df[coluna].astype('category')
        
        log.append(f"Coluna '{coluna}' convertida para {df[coluna].dtype}")
        print(f"‚úÖ Tipo alterado com sucesso para {df[coluna].dtype}")
    except Exception as e:
        print(f"‚ùå Erro na convers√£o: {e}")
    
    return df, log

def tratar_nulos(df):
    log = []
    print("\nüßπ TRATAMENTO DE VALORES NULOS")
    
    colunas_com_nulos = df.columns[df.isnull().any()].tolist()
    if not colunas_com_nulos:
        print("‚úÖ Nenhuma coluna com valores nulos encontrada!")
        return df, log
    
    print("\nüìã COLUNAS COM VALORES NULOS:")
    for i, col in enumerate(colunas_com_nulos, 1):
        nulos = df[col].isnull().sum()
        print(f"{i}. {col} ({nulos} nulos, {nulos/len(df):.1%})")
    
    col_idx = int(input("\n‚ñ∂ Selecione a coluna para tratamento: ")) - 1
    coluna = colunas_com_nulos[col_idx]
    
    print("\n‚öôÔ∏è M√âTODOS DE TRATAMENTO:")
    print("1. Remover linhas com nulos")
    print("2. Preencher com m√©dia (num√©ricas)")
    print("3. Preencher com mediana (num√©ricas)")
    print("4. Preencher com moda (categ√≥ricas)")
    metodo = input("‚ñ∂ Escolha o m√©todo: ")
    
    nulos_antes = df[coluna].isnull().sum()
    
    if metodo == '1':
        df = df.dropna(subset=[coluna])
        log.append(f"Removidas {nulos_antes} linhas com nulos na coluna '{coluna}'")
    elif metodo == '2' and pd.api.types.is_numeric_dtype(df[coluna]):
        fill_value = df[coluna].mean()
        df[coluna] = df[coluna].fillna(fill_value)
        log.append(f"Preenchidos {nulos_antes} nulos com m√©dia ({fill_value:.2f}) na coluna '{coluna}'")
    # [...] outros m√©todos
    
    print(f"\n‚úÖ {nulos_antes} valores nulos tratados na coluna '{coluna}'")
    return df, log

def plotar_dispersao(df):
    """Gera gr√°fico de dispers√£o entre duas vari√°veis com personaliza√ß√£o"""
    print("\n" + "="*50)
    print("üìä GR√ÅFICO DE DISPERS√ÉO")
    
    # Sele√ß√£o das colunas num√©ricas
    numericas = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    
    if len(numericas) < 2:
        print("‚ùå √â necess√°rio ter pelo menos 2 colunas num√©ricas!")
        return
    
    print("\nüî¢ COLUNAS NUM√âRICAS DISPON√çVEIS:")
    for i, col in enumerate(numericas, 1):
        print(f"{i}. {col}")
    
    # Sele√ß√£o das colunas
    try:
        print("\nSelecione as colunas para o eixo X e Y:")
        x_idx = int(input("‚ñ∂ N√∫mero da coluna para eixo X: ")) - 1
        y_idx = int(input("‚ñ∂ N√∫mero da coluna para eixo Y: ")) - 1
        
        if x_idx == y_idx:
            print("‚ùå As colunas devem ser diferentes!")
            return
            
        if not (0 <= x_idx < len(numericas) and 0 <= y_idx < len(numericas)):
            print("‚ùå N√∫meros inv√°lidos!")
            return
            
        x_col = numericas[x_idx]
        y_col = numericas[y_idx]
    except ValueError:
        print("‚ùå Digite apenas n√∫meros!")
        return
    
    # Configura√ß√µes do gr√°fico
    print("\n‚öôÔ∏è CONFIGURA√á√ïES DO GR√ÅFICO:")
    
    # Tamanho da figura
    print("\n‚óè Tamanho da figura (5-20):")
    print("   - Padr√£o: 10x6 | Use valores maiores para muitos dados")
    while True:
        try:
            largura = float(input("‚ñ∂ Largura (5-20, padr√£o=10): ") or 10)
            altura = float(input("‚ñ∂ Altura (5-20, padr√£o=6): ") or 6)
            if 5 <= largura <= 20 and 5 <= altura <= 20:
                break
            print("‚ö†Ô∏è Valores devem estar entre 5 e 20")
        except ValueError:
            print("‚ö†Ô∏è Digite n√∫meros v√°lidos")
    
    # Configura√ß√µes de pontos
    print("\n‚óè Configura√ß√£o dos pontos:")
    print("   - Tamanho (1-100):\n     Padr√£o=20 | Use 5-15 para muitos pontos, 30+ para poucos")
    print("   - Opacidade (0.1-1.0):\n     Padr√£o=0.7 | Use valores baixos (0.2-0.5) para datasets grandes")
    print("   - Cores dispon√≠veis: blue, red, green, purple, orange, etc.")
    
    cor = input("‚ñ∂ Cor dos pontos (padr√£o=blue): ") or "blue"
    tamanho = float(input("‚ñ∂ Tamanho (1-100, padr√£o=20): ") or 20)
    opacidade = float(input("‚ñ∂ Opacidade (0.1-1.0, padr√£o=0.7): ") or 0.7)
    
    # Escala logar√≠tmica
    print("\n‚óè Escala logar√≠tmica:")
    print("   - RECOMEND√ÅVEL PARA:")
    print("     ‚Ä¢ Dados assim√©tricos (m√©dia ‚â† mediana)")
    print("     ‚Ä¢ Valores com grande amplitude (ex: 1 a 1.000.000)")
    print("     ‚Ä¢ Quando h√° muitos outliers extremos")
    print("   - N√ÉO RECOMENDADO PARA:")
    print("     ‚Ä¢ Dados negativos ou com valores zero")
    print("     ‚Ä¢ Dados j√° normalizados")
    log_scale = input("‚ñ∂ Aplicar escala logar√≠tmica? (s/n, padr√£o=n): ").lower() == 's'

    # Linha de regress√£o
    print("\n‚óè Linha de regress√£o:")
    print("   - RECOMEND√ÅVEL PARA:")
    print("     ‚Ä¢ Identificar tend√™ncias lineares")
    print("     ‚Ä¢ Verificar dire√ß√£o (positiva/negativa) da rela√ß√£o")
    print("   - EVITE quando:")
    print("     ‚Ä¢ Os dados s√£o categ√≥ricos")
    print("     ‚Ä¢ H√° rela√ß√£o n√£o-linear clara")
    regressao = input("‚ñ∂ Adicionar linha de regress√£o? (s/n, padr√£o=n): ").lower() == 's'
    
    # T√≠tulos
    titulo = input(f"‚ñ∂ T√≠tulo do gr√°fico (deixe em branco para padr√£o): ") or f"Dispers√£o: {x_col} vs {y_col}"
    x_label = input(f"‚ñ∂ R√≥tulo do eixo X (deixe em branco para '{x_col}'): ") or x_col
    y_label = input(f"‚ñ∂ R√≥tulo do eixo Y (deixe em branco para '{y_col}'): ") or y_col
    
    # Criar o gr√°fico
    plt.figure(figsize=(largura, altura))
    sns.set_style("whitegrid")
    
    if regressao:
        sns.regplot(x=x_col, y=y_col, data=df, 
                   scatter_kws={'color': cor, 's': tamanho, 'alpha': opacidade},
                   line_kws={'color': 'red', 'linestyle': '--'})
    else:
        sns.scatterplot(x=x_col, y=y_col, data=df, 
                       color=cor, s=tamanho, alpha=opacidade)
    
    # Aplicar escala log se selecionado
    if log_scale:
        if pd.api.types.is_numeric_dtype(df[x_col]):
            plt.xscale('log')
            x_label = f"{x_label} (escala log)"
        if pd.api.types.is_numeric_dtype(df[y_col]):
            plt.yscale('log')
            y_label = f"{y_label} (escala log)"
    
    # Configura√ß√µes adicionais
    plt.title(titulo, fontsize=14, pad=20)
    plt.xlabel(x_label, fontsize=12)
    plt.ylabel(y_label, fontsize=12)
    
    # Adicionar grid
    plt.grid(True, linestyle='--', alpha=0.7)
    
    # Mostrar correla√ß√£o se for num√©rico
    if pd.api.types.is_numeric_dtype(df[x_col]) and pd.api.types.is_numeric_dtype(df[y_col]):
        corr = df[[x_col, y_col]].corr().iloc[0,1]
        plt.text(0.95, 0.95, f"Correla√ß√£o: {corr:.2f}", 
                transform=plt.gca().transAxes,
                ha='right', va='top',
                bbox=dict(facecolor='white', alpha=0.8))
    
    # Ajustar layout
    plt.tight_layout()
    plt.show()

def plotar_histograma(df):
    """Gera histograma com configura√ß√µes totalmente manuais"""
    print("\n" + "="*50)
    print("üìä HISTOGRAMA DE CONTAGEM (CONFIGURA√á√ÉO MANUAL)")
    
    # Sele√ß√£o da coluna
    colunas_numericas = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    
    if not colunas_numericas:
        print("‚ùå Nenhuma coluna num√©rica encontrada!")
        return
    
    print("\nüî¢ COLUNAS NUM√âRICAS DISPON√çVEIS:")
    for i, col in enumerate(colunas_numericas, 1):
        print(f"{i}. {col}")
    
    try:
        col_idx = int(input("\n‚ñ∂ Selecione o n√∫mero da coluna: ")) - 1
        coluna = colunas_numericas[col_idx]
    except (ValueError, IndexError):
        print("‚ùå Sele√ß√£o inv√°lida!")
        return

    # Mostrar estat√≠sticas r√°pidas para refer√™ncia
    stats = df[coluna].describe()
    print(f"\n‚ÑπÔ∏è Estat√≠sticas r√°pidas de '{coluna}':")
    print(f"‚Ä¢ M√≠nimo: {stats['min']:,.2f}")
    print(f"‚Ä¢ M√°ximo: {stats['max']:,.2f}")
    print(f"‚Ä¢ M√©dia: {stats['mean']:,.2f}")
    print(f"‚Ä¢ Mediana: {stats['50%']:,.2f}")

    # Configura√ß√µes b√°sicas
    print("\n‚öôÔ∏è CONFIGURA√á√ïES B√ÅSICAS:")
    bins = int(input("‚ñ∂ N√∫mero de bins: ") or 10)
    cor = input("‚ñ∂ Cor (blue/green/red/purple/orange/gray): ") or "blue"
    largura = float(input("‚ñ∂ Largura da figura (5-20): ") or 12)
    altura = float(input("‚ñ∂ Altura da figura (5-20): ") or 8)

    # Configura√ß√µes de faixa de valores
    print("\nüî¢ LIMITES DO EIXO X (Deixe em branco para autom√°tico):")
    min_x = input(f"‚ñ∂ Valor m√≠nimo (atual {stats['min']:,.2f}): ")
    max_x = input(f"‚ñ∂ Valor m√°ximo (atual {stats['max']:,.2f}): ")
    
    try:
        min_x = float(min_x) if min_x else None
        max_x = float(max_x) if max_x else None
    except ValueError:
        print("‚ö†Ô∏è Valores inv√°lidos. Usando autom√°tico.")
        min_x, max_x = None, None

    # Configura√ß√µes avan√ßadas
    print("\nüîß CONFIGURA√á√ïES AVAN√áADAS:")
    print("Escalas dispon√≠veis:")
    print("1. Linear (padr√£o)")
    print("2. Log no eixo Y")
    print("3. Log no eixo X")
    print("4. Log em ambos os eixos")
    escala = input("‚ñ∂ Escolha a escala (1-4): ") or "1"
    
    densidade = input("‚ñ∂ Mostrar curva de densidade? (s/n): ").lower() == 's'
    acumulado = input("‚ñ∂ Histograma acumulado? (s/n): ").lower() == 's'
    mostrar_stats = input("‚ñ∂ Mostrar estat√≠sticas? (s/n): ").lower() == 's'

    # Plotagem
    plt.figure(figsize=(largura, altura))
    sns.set_style("whitegrid")
    
    ax = sns.histplot(
        data=df, 
        x=coluna, 
        bins=bins, 
        color=cor,
        kde=densidade,
        cumulative=acumulado,
        stat='density' if densidade else 'count',
        log_scale=(True if escala in ['3','4'] else False, 
                  True if escala in ['2','4'] else False)
    )
    
    # Aplicar limites do eixo X se especificados
    if min_x is not None or max_x is not None:
        ax.set_xlim(left=min_x, right=max_x)
    
    # T√≠tulo e labels
    titulo = f"Histograma de {coluna}"
    if densidade:
        titulo += " com Densidade"
    if acumulado:
        titulo += " Acumulado"
    
    plt.title(titulo)
    plt.xlabel(coluna + (" (log)" if escala in ['3','4'] else ""))
    plt.ylabel(("Densidade" if densidade else "Contagem") + (" (log)" if escala in ['2','4'] else ""))

    # Estat√≠sticas se solicitado
    if mostrar_stats:
        stats_text = (f"M√≠nimo: {stats['min']:,.2f}\n"
                     f"M√°ximo: {stats['max']:,.2f}\n"
                     f"M√©dia: {stats['mean']:,.2f}\n"
                     f"Mediana: {stats['50%']:,.2f}\n"
                     f"Std: {stats['std']:,.2f}")
        
        plt.text(0.95, 0.95, stats_text,
                transform=ax.transAxes,
                ha='right', va='top',
                bbox=dict(facecolor='white', alpha=0.8))

    plt.tight_layout()
    
    # Op√ß√£o de salvar
    if input("\nüíæ Salvar gr√°fico? (s/n): ").lower() == 's':
        nome = input("‚ñ∂ Nome do arquivo (sem extens√£o): ") or f"hist_{coluna}"
        plt.savefig(f"{nome}.png", dpi=300)
        print(f"‚úÖ Salvo como {nome}.png")
    
    plt.show()

def valores_distintos(df):
    """Mostra valores distintos e contagens de uma coluna"""
    print("\n" + "="*50)
    print("üìå COLUNAS DISPON√çVEIS:")
    
    for i, coluna in enumerate(df.columns, 1):
        print(f"{i}. {coluna}")
    
    try:
        col_idx = int(input("\n‚ñ∂ Selecione o n√∫mero da coluna: ")) - 1
        coluna = df.columns[col_idx]
        
        print(f"\nüìä Valores distintos na coluna '{coluna}':")
        print(df[coluna].value_counts(dropna=False).to_string())
        
    except (ValueError, IndexError):
        print("‚ùå Sele√ß√£o inv√°lida!")

def agrupar_por_faixas(df):
    """Agrupa registros por faixas de valores de uma coluna num√©rica"""
    print("\n" + "="*50)
    print("üìä AGRUPAMENTO POR FAIXAS DE VALORES")
    
    # Selecionar apenas colunas num√©ricas
    colunas_numericas = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    
    if not colunas_numericas:
        print("‚ùå Nenhuma coluna num√©rica encontrada no dataset!")
        return
    
    print("\nüî¢ COLUNAS NUM√âRICAS DISPON√çVEIS:")
    for i, col in enumerate(colunas_numericas, 1):
        print(f"{i}. {col}")
    
    try:
        col_idx = int(input("\n‚ñ∂ Selecione o n√∫mero da coluna: ")) - 1
        coluna = colunas_numericas[col_idx]
    except (ValueError, IndexError):
        print("‚ùå Sele√ß√£o inv√°lida!")
        return
    
    # Mostrar estat√≠sticas b√°sicas para refer√™ncia
    stats = df[coluna].describe()
    print(f"\n‚ÑπÔ∏è Estat√≠sticas de '{coluna}':")
    print(f"‚Ä¢ M√≠nimo: {stats['min']:,.0f}")
    print(f"‚Ä¢ M√°ximo: {stats['max']:,.0f}")
    print(f"‚Ä¢ M√©dia: {stats['mean']:,.0f}")
    print(f"‚Ä¢ Mediana: {stats['50%']:,.0f}")
    
    # Obter configura√ß√µes do usu√°rio
    print("\n‚öôÔ∏è CONFIGURA√á√ÉO DAS FAIXAS:")
    
    # Valida√ß√£o do valor m√≠nimo
    while True:
        try:
            minimo = float(input(f"‚ñ∂ Valor m√≠nimo (sugerido: {stats['min']:.2f}): ") or stats['min'])
            break
        except ValueError:
            print("‚ùå Por favor, digite um n√∫mero v√°lido.")
    
    # Valida√ß√£o do valor m√°ximo
    while True:
        try:
            maximo = float(input(f"‚ñ∂ Valor m√°ximo (sugerido: {stats['max']:.2f}): ") or stats['max'])
            if maximo > minimo:
                break
            print(f"‚ùå O valor m√°ximo deve ser maior que o m√≠nimo ({minimo})")
        except ValueError:
            print("‚ùå Por favor, digite um n√∫mero v√°lido.")
    
    # Valida√ß√£o do intervalo
    while True:
        try:
            intervalo = float(input("‚ñ∂ Intervalo de cada faixa (ex: 50 para faixas de 50 em 50): "))
            if intervalo > 0:
                break
            print("‚ùå O intervalo deve ser maior que zero")
        except ValueError:
            print("‚ùå Por favor, digite um n√∫mero v√°lido.")
    
    # Perguntar sobre a quantidade de linhas a serem exibidas ANTES de processar
    try:
        max_rows = int(input("\n‚ñ∂ Quantidade de linhas a exibir (0 para todas): ") or 0)
    except ValueError:
        print("‚ùå Valor inv√°lido. Mostrando todas as linhas.")
        max_rows = 0
    
    # Criar as faixas
    faixas = []
    inicio = minimo
    
    while inicio < maximo:
        fim = inicio + intervalo
        # Garante que a √∫ltima faixa n√£o ultrapasse o m√°ximo
        if fim > maximo:
            fim = maximo
        faixas.append((inicio, fim))
        inicio = fim
    
    # Contar registros em cada faixa
    resultados = []
    for i, (inicio_faixa, fim_faixa) in enumerate(faixas):
        if i == len(faixas) - 1:
            # √öltima faixa inclui o valor m√°ximo
            condicao = (df[coluna] >= inicio_faixa) & (df[coluna] <= fim_faixa)
        else:
            condicao = (df[coluna] >= inicio_faixa) & (df[coluna] < fim_faixa)
        
        contagem = len(df[condicao])
        porcentagem = (contagem / len(df)) * 100
        
        resultados.append({
            'Faixa': f"{inicio_faixa:,.0f} a {fim_faixa:,.0f}",
            'Contagem': contagem,
            'Porcentagem (%)': porcentagem
        })
    
    # Criar DataFrame com os resultados
    df_resultados = pd.DataFrame(resultados)
    
    # Configurar formata√ß√£o para melhor visualiza√ß√£o
    pd.options.display.float_format = '{:,.2f}'.format
    
    # Aplicar a restri√ß√£o de linhas
    if max_rows > 0:
        if len(df_resultados) > max_rows:
            print(f"\n‚ÑπÔ∏è Mostrando {max_rows} linhas. {len(df_resultados)-max_rows} linhas ocultas.")
            df_resultados = df_resultados.head(max_rows)
        pd.options.display.max_rows = None  # Desabilita o truncamento do pandas
    else:
        pd.options.display.max_rows = None
    
    print("\n" + "="*50)
    print(f"üìä RESULTADO - DISTRIBUI√á√ÉO POR FAIXAS DE '{coluna}'")
    print("="*50)
    print(df_resultados.to_string(index=False))
    print("="*50)
    
    # Resetar configura√ß√µes de exibi√ß√£o
    pd.reset_option('display.float_format')
    pd.reset_option('display.max_rows')
    
    # Op√ß√£o para plotar gr√°fico
    if input("\n‚ñ∂ Deseja visualizar um gr√°fico? (s/n): ").lower() == 's':
        plt.figure(figsize=(12, 6))
        sns.barplot(x='Faixa', y='Contagem', data=df_resultados, palette='viridis')
        plt.title(f"Distribui√ß√£o de registros por faixas de {coluna}")
        plt.xlabel("Faixas de valores")
        plt.ylabel("N√∫mero de registros")
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        plt.show()

# =============================================== #
# ================== MENU ====================== #
def mostrar_menu():
    print("\n" + "="*50)
    print("üìä MENU PRINCIPAL DE AN√ÅLISE")
    print("="*50)
    print("1. Estat√≠sticas das colunas num√©ricas")
    print("2. Compara√ß√£o entre dois campos")
    print("3. Boxplot com limites personalizados")
    print("4. Tratamento/Limpeza de dados")
    print("5. Valores distintos de uma coluna")
    print("6. Gr√°fico de dispers√£o")
    print("7. Histograma de contagem")
    print("8. Agrupamento por faixas de valores")  # NOVA OP√á√ÉO
    print("0. Sair")
    return input("‚ñ∂ Escolha uma op√ß√£o: ")

# =============================================== #
# ================== MAIN ======================= #
if __name__ == "__main__":
    while True:
        opcao = mostrar_menu()
        
        if opcao == '0':
            print("\n‚úÖ Programa encerrado. At√© logo!")
            break
        elif opcao == '1':
            estatisticas_colunas(df)
        elif opcao == '2':
            comparacao_campos(df)
        elif opcao == '3':
            plotar_boxplot(df)
        elif opcao == '4':
            resultado = tratamento_limpeza(df)
            if resultado is not None:
                df = resultado
        elif opcao == '5':
            valores_distintos(df)
        elif opcao == '6':  # NOVA OP√á√ÉO
            plotar_dispersao(df)
        elif opcao == '7':
            plotar_histograma(df)
        elif opcao == '8':
            agrupar_por_faixas(df)
        else:
            print("‚ùå Op√ß√£o inv√°lida!")